/*
In order to help us create more flexible functions, ES6 introduces default parameters forfunctions 
*/

const greeting = (name = "Anonymous") => "Hello "+name ;
console.log(greeting("Can")) ; // will display Hello Can 
console.log(greeting()) ;  // will display Hello Anonymous 
/*
The default parameter kicks in when the argument is not specified (it is undefined).
*/ 

//--------------------------------------------------------------------------------------------------
/*
In order to help us create more flexible functions, ES6 introduces the rest parameter for function 
parameters.With rest parameter , you can create functions that take a variable numbers of arguments
These arguments are stored in an array that can be accessed later from inside the function.
*/

function howmany(...args ) {
  return "You have passed "+args.length + " arguments." ; 
}
console.log(howMany(0,1,2)) ; // You have passed 3 arguments 
console.log(howMany("string",null,[1,2,3],{})) ; //  You have passed 4 arguments 

/* The rest parameter eliminest the  need to check the args array and allows us to apply map(), filter() 
and reduce() on the parametrs array.*/

//------------------------------Spread Operator to Evaluate Arrays In-Place -----------------
var arr = [6, 89, 3, 45];
var maximus = Math.max.apply(null, arr); //maximus would have a value of 89.

/*
We had to use Math.max.apply(null, arr) because Math.max(arr) returns NaN. 
Math.max() expects comma-separated arguments, but not an array. The spread 
operator makes this syntax much better to read and maintain.
*/ 

const arr = [6, 89, 3, 45];
const maximus = Math.max(...arr); //maximus would have a value of 89.

const arr1 = ['JAN', 'FEB', 'MAR', 'APR', 'MAY'];

let arr2;
arr2 = [...arr1]; 
console.log(arr2);



